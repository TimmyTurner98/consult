package postgres

import (
	"fmt"
	"log"
	"time"

	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
)

var DB *gorm.DB
var config *Config

// InitDBConfig –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func InitDBConfig() error {
	var err error
	config, err = InitConfigs() // –í—ã–∑—ã–≤–∞–µ–º InitConfigs –∏–∑ config.go
	if err != nil {
		return fmt.Errorf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %w", err)
	}
	return nil
}

// ConnectDB –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ PostgreSQL —á–µ—Ä–µ–∑ GORM
func ConnectDB() {
	if config == nil {
		if err := InitDBConfig(); err != nil {
			log.Fatalf("%v", err)
		}
	}
	// üîç –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	fmt.Printf("üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL: host=%s port=%s user=%s dbname=%s\n",
		config.Database.Host,
		config.Database.Port,
		config.Database.Username,
		config.Database.DBname,
	)

	dsn := fmt.Sprintf(
		"host=%s port=%s user=%s password=%s dbname=%s sslmode=%s",
		config.Database.Host,
		config.Database.Port,     // ‚úÖ –¢–µ–ø–µ—Ä—å –ø–æ—Ä—Ç –Ω–∞ –º–µ—Å—Ç–µ
		config.Database.Username, // ‚úÖ –¢–µ–ø–µ—Ä—å username –Ω–∞ –º–µ—Å—Ç–µ
		config.Database.Password,
		config.Database.DBname,
		config.Database.SSLMode,
	)

	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{
		Logger: logger.Default.LogMode(logger.Info),
	})
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: %v", err)
	}

	sqlDB, err := db.DB()
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è *sql.DB: %v", err)
	}
	sqlDB.SetMaxOpenConns(10)
	sqlDB.SetMaxIdleConns(5)
	sqlDB.SetConnMaxLifetime(time.Hour)

	fmt.Println("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —á–µ—Ä–µ–∑ GORM!")

	DB = db
}

// DBConfig –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func DBConfig() *Config {
	if config == nil {
		if err := InitDBConfig(); err != nil {
			log.Fatalf("%v", err)
		}
	}
	return config
}
